#!/usr/bin/perl
use strict;
use List::Util qw(sum max);

my %maze;
my %health;
my $width;
my $y = 0;
my $elves = 0;
my $goblins = 0;
while (<>) {
    chomp;
    my $x = 0;
    for my $s (split '') {
        if ($s eq 'E') {
            $s .= ++$elves;
            $health{$s} = 200;
        }
        if ($s eq 'G') {
            $s .= ++$goblins;
            $health{$s} = 200;
        }
        $maze{"$x,$y"} = $s;
        $x++;
    }
    $width = $x if $width < $x;
    $y++;
}
my $height = $y;

print "Maze size ${width}x$height\n";
print "Elves: $elves, goblins: $goblins\n";
print "\n";

my $round = 0;

round: while () {
    print "After $round rounds\n";
    for my $y (0..$width-1) {
        for my $x (0..$height-1) {
            printf '%-2s', $maze{"$x,$y"};
        }
        print "\n";
    }


    print "Turns:\n";
    for my $unit_position (sort readingorder grep units($_), keys %maze) {
        my %maze_round = %maze;
        my ($unit_x, $unit_y) = split ',', $unit_position;
        my $unit = $maze{$unit_position};

        # print "$unit at $unit_position\n";

        # Move
        move: {
            # 1. find targets
            my @target_positions = grep { is_elve($unit) ? goblins($_) : elves($_) } keys %maze;
            # print "Target pos: @target_positions\n";

            # 1b. if no targets left, combat ends
            last round unless @target_positions;

            # 2. find adjacent free tiles
            my @destination_positions;
            for my $target_position (@target_positions) {
                my ($target_x, $target_y) = split ',', $target_position;

                for my $destination_position (
                    ($target_x-1).','.($target_y),
                    ($target_x+1).','.($target_y),
                    ($target_x  ).','.($target_y-1),
                    ($target_x  ).','.($target_y+1),
                    ) {
                    push @destination_positions => $destination_position if $maze_round{$destination_position} eq '.';
                }
            }
            last move unless @destination_positions;
            # print "@destination_positions\n";

            # 3. find distances from unit to reachable tiles
            my %reachable_distance;
            for my $destination_position (@destination_positions) {
                my ($destination_x, $destination_y) = split ',', $destination_position;
                my $distance = distance($unit_x, $unit_y => $destination_x, $destination_y);
                # print "Distance to $destination_position is $distance\n";
                $reachable_distance{$destination_position} = $distance if $distance;
            }
            last move unless %reachable_distance;

            # 4. choose closest tile as target
            my ($choosen_position) =  sort readingorder sort { $reachable_distance{$a} <=> $reachable_distance{$b} } keys %reachable_distance;
            $choosen_position or die "Can't find reachable position";

            # 5. find distances from target back to unit
            my ($choosen_x, $choosen_y) = split ',', $choosen_position;
            my %distance = distance_from($choosen_x, $choosen_y);

            # 5. step along closest path
            my ($step_position) = sort readingorder sort { $distance{$a} <=> $distance{$b} } grep $distance{$_}, (
                    ($unit_x-1).','.($unit_y),
                    ($unit_x+1).','.($unit_y),
                    ($unit_x  ).','.($unit_y-1),
                    ($unit_x  ).','.($unit_y+1),
            );
            $maze{$unit_position} = '.';
            $maze{$step_position} eq '.' or die "Step position, $step_position, is not free, $maze{$step_position}.";
            $maze{$step_position} = $unit;
            print "$unit moves to $step_position\n";
        }

        # Attack
        attack: {
            # 1. find targets in range


            # 2. choose weakest
            # 3. reduce target health by 3
            # 4. clear if dead

        }
    }



last if $round >= 3; # TODO remove


    $round++;
    print "\n";
}

print "Combat ended after $round completed round.\n";

my $elves_health = sum map $health{$_}, grep /^E/, keys %health;
my $goblins_health = sum map $health{$_}, grep /^G/, keys %health;

print "Health score $elves_health vs. $goblins_health\n";
print "Result: ", $round * max($elves_health, $goblins_health), "\n";



sub readingorder {
    my @a = split ',', $a;
    my @b = split ',', $b;
    $a[1] <=> $b[1] ||
    $a[0] <=> $b[0];
}

sub elves {
    is_elve($maze{$_});
}

sub is_elve {
    shift =~ /^E/;
}

sub goblins {
    is_goblin($maze{$_});
}

sub is_goblin {
    shift =~ /^G/;
}

sub units {
    is_elve($maze{$_}) ||
    is_goblin($maze{$_});
}


sub distance_from {
    my ($x, $y) = @_;
    my $distance = 1;
    my %distance;
    $distance{"$x,$y"} = $distance;

    while () {
        $distance++;
        my $added;
        for my $y (0..$width-1) {
            for my $x (0..$height-1) {
                if (!$distance{"$x,$y"} and $maze{"$x,$y"} eq '.' and (
                        $distance{($x-1) .",$y"} == $distance - 1 or
                        $distance{($x+1) .",$y"} == $distance - 1 or
                        $distance{"$x,". ($y-1)} == $distance - 1 or
                        $distance{"$x,". ($y+1)} == $distance - 1
                    )) {
                    $distance{"$x,$y"} = $distance;
                    $added++;
                }

            }
        }
        last unless $added;
    }

    return %distance;
}

sub distance {
    my ($sx, $sy, $dx, $dy) = @_;
    my %distance = distance_from($sx, $sy);
    return $distance{"$dx,$dy"};
}